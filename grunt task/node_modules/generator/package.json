{
  "author": {
    "name": "Andrew Sliwinski",
    "email": "andrewsliwinski@acm.org",
    "url": "http://andrewsliwinski.com"
  },
  "name": "generator",
  "description": "A simple project bootstrapping utility.",
  "keywords": [
    "bootstrap",
    "project",
    "template",
    "automation"
  ],
  "version": "0.0.4",
  "homepage": "https://github.com/thisandagain/generator",
  "repository": {
    "type": "git",
    "url": "https://github.com/thisandagain/generator.git"
  },
  "main": "./lib/index.js",
  "bin": {
    "generator": "./bin/index.js",
    "generate": "./bin/index.js"
  },
  "scripts": {
    "test": "tap ./test/*.js"
  },
  "dependencies": {
    "async": "~0.1.22",
    "colors": "~0.6.0-1",
    "commander": "~1.0.4",
    "fs-extra": "~0.2.1",
    "findit": "~0.1.2"
  },
  "devDependencies": {
    "tap": "~0.3.1",
    "codebux": "~0.1.2"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.6"
  },
  "preferGlobal": true,
  "readme": "## Generator\n#### Good coders code. Great reuse.\nGenerator is a CLI utility that is designed to make bootstrapping and templating projects simple. Generator is platform agnostic: Like Node.js? Saucy. Ruby? Sounds good. Objective-C? Go for it. Go? Yup. Fortran? Why not.\n\n[![Build Status](https://secure.travis-ci.org/thisandagain/generator.png)](http://travis-ci.org/thisandagain/generator)\n\n### Installation\nGenerator can be installed using [NPM](https://npmjs.org/):\n```bash\n[sudo] npm install -g generator\n```\n\nOnce installed, you should load the default templates:\n```bash\ngenerate --setup\n```\n\n### Usage\nIn order to bootstrap a project using one of the default templates you simply run `generate` and specifiy a template and project name. For example, let's create a new Node.js `module` called `myAwesomeProject`:\n```bash\ngenerate --type module --name myAwesomeProject\n```\n\n---\n\n### Default Templates\nGenerator comes with a few templates to get you started. While they are usable as-is, the whole point of Generator is make the creation of custom templates easy... so have fun and hack your own!\n\n- `module` [Node.js](http://nodejs.org/) module\n- `binary` [Node.js](http://nodejs.org/) CLI application\n- `arduino` [Arduino](http://www.arduino.cc/) project\n\n### How Templates Work\nTemplates are simply directories with any combination of files and sub-directories found within them. To create a new template simply create a new directory within your `~/.generator` path or copy one of the default templates and modify it. Upon use, Generator will walk the template looking for any instances of `__somelowercasevariable__` and prompt for a value. For example, a template including this:\n\n```javascript\n/**\n * __description__\n *\n * @package __name__\n * @author __author__ <__email__>\n */\n```\n\nWill prompt:\n```bash\ndescription: Rainbow catsplosion.\nauthor: Nyan Cat\nemail: kitty@meow.com\n```\n\nWhich will generate:\n```javascript\n/**\n * Rainbow catsplosion.\n *\n * @package myAwesomeProject\n * @author Nyan Cat <kitty@meow.com>\n */\n```\n\n---\n\n### Post Processing\nBy default, Generator will look for a `makefile` and (if found) will run `make generator` after all other template processing has been completed. This is particularly handy for dealing with template dependencies that may change over time (like git repositories or even [NPM](https://npmjs.org/) modules). For example:\n\n```bash\ngenerator:\n    npm install\n\n.PHONY: generator\n```\n\nOr... heck, let's go crazy nuts and automate setting up our git repo:\n\n```bash\ngenerator:\n    git init\n    git remote add origin https://__github__@github.com/__github__/__name__\n    npm install\n\n.PHONY: generator\n```\n\n---\n\n### Testing\n```bash\nnpm test\n```\n\n### Notes\n- C, C++, and PHP often use the `__SOMETHING__` pattern for [macros](http://gcc.gnu.org/onlinedocs/gcc-3.1/cpp/Standard-Predefined-Macros.html). For this reason, Generator will ignore any variable instances that are specified in caps. This works fine for C and C++ users, but given that such macros in PHP are case insensitive, PHP users should keep this limitation in mind while designing templates.\n- \"Good coders code. Great reuse.\" quote shamelessly stolen from [Peteris Krumins' blog](http://www.catonmat.net/) (which you should read).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/thisandagain/generator/issues"
  },
  "_id": "generator@0.0.4",
  "_from": "generator@"
}
