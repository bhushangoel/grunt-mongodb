#!/usr/bin/env node
var alert, args, auth, clc, dump, fs, knox, parsed, program, spawn, start;

clc = require('cli-color');

spawn = require('child_process').spawn;

program = require('commander');

knox = require('knox');

fs = require('fs');

var url = require('url');

alert = function(x) {
  return console.error(clc.red(x));
};

program.version(clc.red('0.1')).usage('[s3 config] [ (mongodb config) | (mongodb connection string) ]').option('-k, --key <key>', 's3 api key').option('-s, --secret <secret>', 's3 api secret').option('-b, --bucket <bucket>', 'target s3 bucket').option('-m, --mongo <string>', 'mongodb connection string').option('-H, --host <host>', 'mongodb host').option('-p, --port <port>', 'mongodb port').option('-d, --db <database>', 'target mongodb database').option('-c, --collection <collection>', 'target mongodb collection (optional) - if blank, will get all collections').option('-U, --user <user>', 'mongodb user authentication username').option('-P, --pass <pass>', 'mongodb user authentication password').option('-o, --out <file>', 'specify output file (optional) - if blank, will put it in a timestamp folder').parse(process.argv);

if (program.key != null) {
  if (program.secret != null) {
    if (program.bucket != null) {
      if (program.mongo != null) {
        parsed = url.parse(program.mongo);
        auth = parsed.auth.split(":");
        program.user = auth[0];
        program.pass = auth[1];
        program.host = parsed.hostname;
        program.port = parsed.port;
        console.log(parsed)
        program.db = parsed.path.substring(1, parsed.path.length );
      }
      if (program.host && program.port && (program.db != null)) {
        console.log('       .--------.__');
        console.log('       |::::::::|[_I___,');
        console.log('☁☁☁☁☁☁☁|_.-.____I__.-~;|');
        console.log('☁☁☁☁☁☁☁☁`(_)--------(_)"');
        console.log(clc.red('Truck - MongoDB Backup -> S3'));
        console.log(clc.blue('============================'));
        args = [];
        args.push("--host");
        args.push(program.host);
        args.push("--port");
        args.push(program.port);
        args.push("--db");
        args.push(program.db);
        if (program.collection != null) {
          args.push("--collection");
          args.push(program.collection);
        }
        if (program.user && (program.pass != null)) {
          args.push("--username");
          args.push(program.user);
          args.push("--password");
          args.push(program.pass);
        }
        if (program.out != null) {
          args.push("--out");
          args.push(program.out);
        } else {
          args.push("--out");
          args.push(Date.now());
        }
        console.log(args.join(" "));
        dump = spawn('mongodump', args);
        start = new Date().getTime();
        dump.on('exit', function(code) {
          var beg, finder, kclient;
          console.log('MongoDB database dump exited with code ' + code);
          kclient = knox.createClient({
            key: program.key,
            secret: program.secret,
            bucket: program.bucket
          });
          finder = require('findit').find('' + args[args.length - 1]);
          beg = "/time-" + (new Date(Date.now())).toISOString();
          console.log(beg);
          finder.on('file', function(file, stat) {
            console.log(file);
            return fs.readFile(file, function(err, buf) {
              var req;
              req = kclient.put(beg + "/" + file, {
                "Content-Length": buf.length,
                "Content-Type": "text/plain"
              });
              req.on("response", function(res) {
                if (200 === res.statusCode) {
                  return console.log("saved to %s", req.url);
                }
              });
              return req.end(buf);
            });
          });
          return finder.on('end', function() {
            var end;
            end = new Date().getTime();
            return console.log(clc.yellow("It took " + ((end - start) / 1000.0) + " seconds."));
          });
        });
      } else {
        alert('Uh oh! You forgot to include the MongoDB configuration.');
      }
    } else {
      alert('Uh oh! You forgot to include the target S3 bucket.');
    }
  } else {
    alert('Uh oh! You forgot to include the S3 API Secret.');
  }
} else {
  alert('Uh oh! You forgot to include the S3 API Key.');
}
