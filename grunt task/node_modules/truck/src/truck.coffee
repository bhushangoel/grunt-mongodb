clc     = require 'cli-color'
spawn   = require('child_process').spawn
program = require 'commander'
knox    = require 'knox'
fs      = require 'fs'

alert = (x) -> console.error(clc.red(x))

program
  .version(clc.red('0.1'))
  .usage('[s3 config] [ (mongodb config) | (mongodb connection string) ]')
  .option('-k, --key <key>', 's3 api key')
  .option('-s, --secret <secret>', 's3 api secret')
  .option('-b, --bucket <bucket>', 'target s3 bucket' )
  .option('-m, --mongo <string>', 'mongodb connection string')
  .option('-H, --host <host>', 'mongodb host')
  .option('-p, --port <port>', 'mongodb port')
  .option('-d, --db <database>', 'target mongodb database')
  .option('-c, --collection <collection>', 'target mongodb collection (optional) - if blank, will get all collections')
  .option('-U, --user <user>', 'mongodb user authentication username')
  .option('-P, --pass <pass>', 'mongodb user authentication password')
  .option('-o, --out <file>', 'specify output file (optional) - if blank, will put it in a timestamp folder')
  .parse process.argv

if program.key?

  if program.secret?

    if program.bucket?
      
      if program.mongo?

        parsed = url.parse(program.mongo)
        auth = (parsed.auth).split(":")

        program.user = auth[0]
        program.pass = auth[1]
        program.host = parsed.hostname
        program.port = parsed.port
        program.db   = (parsed.path).substring(1, (parsed.path.length))

      if program.host and program.port and program.db?
        console.log '       .--------.__'
        console.log '       |::::::::|[_I___,'
        console.log '☁☁☁☁☁☁☁|_.-.____I__.-~;|'
        console.log '☁☁☁☁☁☁☁☁`(_)--------(_)"'
        console.log clc.red('Truck - MongoDB Backup -> S3')
        console.log clc.blue('============================')


        args = []

        args.push "--host"
        args.push program.host
        args.push "--port"
        args.push program.port
        args.push "--db"
        args.push program.db

        if program.collection?
          args.push "--collection"
          args.push program.collection

        if program.user and program.pass?
          args.push "--username"
          args.push program.user
          args.push "--password"
          args.push program.pass

        if program.out?
          args.push "--out"
          args.push program.out
        
        else
          args.push "--out"
          args.push Date.now()

        # which = spawn 'which mongodump'

        # which.stderr.on 'data', (d) ->
        #   console.log d.toString("utf8")
        
        # which.on 'exit', (d) ->
        #   console.log d

        dump = spawn 'mongodump', args
        
        start = new Date().getTime()

        dump.on 'exit', (code) ->
          
          console.log 'MongoDB database dump exited with code ' + code
          kclient = knox.createClient(
            key: program.key
            secret: program.secret
            bucket: program.bucket
          )

          finder = require('findit').find '' + args[args.length - 1]
          beg = "/time-"+(new Date(Date.now())).toISOString();
          finder.on 'file', (file, stat) ->
            fs.readFile file, (err, buf) ->
              req = kclient.put(beg+"/"+file,
                "Content-Length": buf.length
                "Content-Type": "text/plain"
              )
              req.on "response", (res) ->
                console.log "saved to %s", req.url  if 200 is res.statusCode

              req.end buf
          
          finder.on 'end', () ->
            end = new Date().getTime()
            console.log clc.yellow("It took " + ((end - start) / 1000.0) + " seconds.")

      else

        alert('Uh oh! You forgot to include the MongoDB configuration.')

    else

      alert('Uh oh! You forgot to include the target S3 bucket.')

  else

    alert('Uh oh! You forgot to include the S3 API Secret.')

else

  alert('Uh oh! You forgot to include the S3 API Key.')